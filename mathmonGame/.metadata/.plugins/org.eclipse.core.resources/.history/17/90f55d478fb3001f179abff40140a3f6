package main;

import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;
import javax.swing.JLabel;

public class mathmonChoosePlayer extends JFrame {

    private static final long serialVersionUID = 1L;
    private CustomPanel contentPane; // Custom JPanel for background drawing
    private JButton btnBack;
    private JButton btnStart;
    private JLabel lblLiora;
    private JLabel lblAxion;
    private boolean isPlayerSelected = false; // Flag to check if a player is selected

    // Player images
    private Image lioraImage;
    private Image axionImage;

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    mathmonChoosePlayer frame = new mathmonChoosePlayer();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the frame.
     */
    public mathmonChoosePlayer() {
        setSize(1080, 630);
        setResizable(false);
        setTitle("Choose Player");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        try {
            lioraImage = ImageIO.read(getClass().getResource("/picBackgrounds/picLiora.png"));
            axionImage = ImageIO.read(getClass().getResource("/picBackgrounds/picAxion.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        contentPane = new CustomPanel(null); // Background is managed by CustomPanel
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);

        // Back Button
        btnBack = createImageButton("/picBackgrounds/picBtnBack.png", 162, 40);
        btnBack.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
                MainMenuFrame mainMenu = new MainMenuFrame();
                mainMenu.setVisible(true); // Show the main menu
            }
        });

        // Start Button (Initially disabled)
        btnStart = createImageButton("/picBackgrounds/picBtnStart.png", 162, 40);
        btnStart.setEnabled(false); // Disable start button initially
        btnStart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
                mathmonMain gameFrame = new mathmonMain();
                gameFrame.setVisible(true); // Show the Game Frame
            }
        });

        // Player Selection Labels (Click to select a player)
        lblLiora = createPlayerLabel(lioraImage);
        lblLiora.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectPlayer("Liora");
            }
        });

        lblAxion = createPlayerLabel(axionImage);
        lblAxion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectPlayer("Axion");
            }
        });

        GroupLayout gl_contentPane = new GroupLayout(contentPane);
        gl_contentPane.setHorizontalGroup(
            gl_contentPane.createParallelGroup(Alignment.LEADING)
                .addGroup(gl_contentPane.createSequentialGroup()
                    .addGap(161)
                    .addComponent(btnBack, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(ComponentPlacement.RELATED, 559, Short.MAX_VALUE)
                    .addComponent(btnStart, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
                    .addGap(151))
                .addGroup(gl_contentPane.createSequentialGroup()
                    .addGap(100)
                    .addComponent(lblLiora, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(ComponentPlacement.RELATED, 250, Short.MAX_VALUE)
                    .addComponent(lblAxion, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                    .addGap(100))
        );
        gl_contentPane.setVerticalGroup(
            gl_contentPane.createParallelGroup(Alignment.TRAILING)
                .addGroup(gl_contentPane.createSequentialGroup()
                    .addContainerGap(300, Short.MAX_VALUE)
                    .addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_contentPane.createSequentialGroup()
                            .addComponent(lblLiora)
                            .addGap(93))
                        .addGroup(Alignment.TRAILING, gl_contentPane.createSequentialGroup()
                            .addComponent(lblAxion)
                            .addGap(105))))
        );
        contentPane.setLayout(gl_contentPane);
    }

    private JButton createImageButton(String imagePath, int width, int height) {
        JButton button = new JButton("");
        try {
            Image originalImage = ImageIO.read(getClass().getResource(imagePath));
            Image scaledImage = originalImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);
            button.setIcon(new ImageIcon(scaledImage));
            button.setHorizontalTextPosition(SwingConstants.CENTER);
            button.setVerticalTextPosition(SwingConstants.CENTER);
            button.setContentAreaFilled(false);
            button.setBorderPainted(false);
            button.setFocusPainted(false);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return button;
    }

    private JLabel createPlayerLabel(Image image) {
        ImageIcon icon = new ImageIcon(image);
        JLabel label = new JLabel();
        label.setIcon(icon);
        label.setHorizontalAlignment(SwingConstants.CENTER);
        label.setVerticalAlignment(SwingConstants.CENTER);
        return label;
    }

    private void selectPlayer(String playerName) {
        isPlayerSelected = true;
        btnStart.setEnabled(true); // Enable the "Start" button

        // Optional: Provide some indication that the player has been selected (e.g., change border or style)
        lblLiora.setBorder(null); // Reset any border
        lblAxion.setBorder(null); // Reset any border

        if ("Liora".equals(playerName)) {
            lblLiora.setBorder(new javax.swing.border.LineBorder(java.awt.Color.RED, 5)); // Highlight Liora
        } else {
            lblAxion.setBorder(new javax.swing.border.LineBorder(java.awt.Color.RED, 5)); // Highlight Axion
        }
    }

    private static class CustomPanel extends JPanel {
        private static final long serialVersionUID = 1L;
        private final Image backgroundImage;

        public CustomPanel(Image image) {
            this.backgroundImage = image;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (backgroundImage != null) {
                Graphics2D g2d = (Graphics2D) g;
                g2d.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), null);
            }
        }
    }
}
